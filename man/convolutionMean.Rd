% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/imagine-main.R
\name{convolutionMean}
\alias{convolutionMean}
\title{Make convolution calculation from numeric matrix}
\usage{
convolutionMean(dataMatrix, kernel, x, times)
}
\arguments{
\item{dataMatrix}{A \code{numeric matrix} object used for apply filters.}

\item{kernel}{A little matrix used as mask for each cell of \code{dataMatrix}.}

\item{x}{}

\item{times}{How many times do you want to apply the filter?}
}
\value{
It returns a \code{matrix} object with the same dimensions of \code{dataMatrix}.
}
\description{
This function takes a \code{matrix} object, and for each cell multiplies its neighborhood by
the \code{kernel}. Finally, it returns for each cell the mean of the kernel-weighted sum.
}
\details{
This function uses the \code{engine1} C++ algorithm. More details are shown in vignette.
}
\examples{
# Generate example matrix
nRows <- 10
nCols <- 20

myMatrix <- matrix(runif(nRows*nCols, 0, 100), nrow = nRows, ncol = nCols)
kernel <- diag(3)

# Make convolution
myOutput <- convolution2D(myMatrix, kernel)

# Plot results
image(myMatrix, zlim = c(0, 100))
image(myOutput, zlim = c(0, 100))
}

